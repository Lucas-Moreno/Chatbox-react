{"version":3,"sources":["components/Formulaire.js","components/Message.js","base.js","App.js","components/Connexion.js","components/NotFound.js","serviceWorker.js","index.js"],"names":["Formulaire","state","message","length","props","createMessage","addMessage","pseudo","setState","handleSubmit","event","preventDefault","handleChange","target","value","handleKeyUp","key","className","onSubmit","this","onChange","onKeyUp","required","maxLength","type","Component","Message","isUser","base","firebase","initializeApp","apiKey","authDomain","databaseURL","Rebase","createClass","database","App","messages","match","params","messagesRef","createRef","Date","now","Object","keys","slice","forEach","syncState","context","ref","current","scrollTop","scrollHeight","map","timeout","classNames","Connexion","goToChat","Redirect","push","to","placeholder","NotFound","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","Switch","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c672b62.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Formulaire extends Component {\n  state = {\n    message: '',\n    length: this.props.length\n  }\n\n  createMessage = () => {\n    const { addMessage, pseudo, length } = this.props\n\n    const message = {\n      pseudo,\n      message: this.state.message\n    }\n\n    addMessage(message)\n\n    // Reset\n    this.setState({ message: '', length })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    this.createMessage()\n  }\n\n  handleChange = event => {\n    const message = event.target.value\n    const length = this.props.length - message.length\n    this.setState({ message, length })\n  }\n\n  handleKeyUp = event => {\n    if (event.key === 'Enter') {\n      this.createMessage()\n    }\n  }\n\n  render () {\n    return (\n      <form\n        className='form'\n        onSubmit={this.handleSubmit}>\n        <textarea\n          value={this.state.message}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          required\n          maxLength={this.props.length} />\n        <div className='info' >\n          { this.state.length }\n        </div>\n        <button type='submit' >\n          Envoyer!\n        </button>\n      </form>\n    )\n  }\n}\n\nexport default Formulaire\n","import React from 'react'\n\nconst Message = ({ pseudo, message, isUser }) => {\n  if (isUser(pseudo)) {\n    return (\n      <p className='user-message'>\n        {message}\n      </p>\n    )\n  } else {\n    return (\n      <p className='not-user-message'>\n        <strong>{pseudo}: </strong>{message}\n      </p>\n    )\n  }\n}\n\nexport default Message\n","import Rebase from 're-base'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: 'AIzaSyBKufOu70yt4FDO3G5itdPr9DqNn3iXNmw',\n  authDomain: 'chatbox-app-d7e4f.firebaseapp.com',\n  databaseURL: 'https://chatbox-app-d7e4f.firebaseio.com'\n})\n\nconst base = Rebase.createClass(firebase.database())\n\nexport { firebaseApp }\n\nexport default base\n","import React, { Component, createRef } from 'react'\n// STYLE\nimport './App.css'\nimport './animations.css'\n\n\nimport Formulaire from './components/Formulaire'\nimport Message from './components/Message'\n\n// Firebase\nimport base from './base'\n\n// Animations\nimport {\n  CSSTransition,\n  TransitionGroup\n} from 'react-transition-group'\n\nclass App extends Component {\n  state = {\n    messages: {},\n    pseudo: this.props.match.params.pseudo\n  }\n\n  messagesRef = createRef()\n\n  componentDidMount () {\n    base.syncState('/', {\n      context: this,\n      state: 'messages'\n    })\n  }\n\n  componentDidUpdate () {\n    const ref = this.messagesRef.current\n    ref.scrollTop = ref.scrollHeight\n  }\n\n  addMessage = message => {\n    const messages = { ...this.state.messages }\n\n    messages[`message-${Date.now()}`] = message\n    Object\n      .keys(messages)\n      .slice(0, -10)\n      .forEach(key => {\n        messages[key] = null\n      })\n\n    this.setState({ messages })\n  }\n\n  isUser = pseudo => pseudo === this.state.pseudo\n\n  render () {\n    const messages = Object\n      .keys(this.state.messages)\n      .map(key => (\n        <CSSTransition\n          timeout={200}\n          classNames='fade'\n          key={key}>\n          <Message\n            isUser={this.isUser}\n            message={this.state.messages[key].message}\n            pseudo={this.state.messages[key].pseudo} />\n        </CSSTransition>\n      ))\n\n    return (\n      <div className='box'>\n        <div>\n          <div className='messages' ref={this.messagesRef}>\n            <TransitionGroup className='message'>\n              { messages }\n            </TransitionGroup>\n          </div>\n        </div>\n        <Formulaire\n          length={140}\n          pseudo={this.state.pseudo}\n          addMessage={this.addMessage} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nclass Connexion extends Component {\n  state = {\n    pseudo: '',\n    goToChat: false\n  }\n\n  handleChange = event => {\n    const pseudo = event.target.value\n    this.setState({ pseudo })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    this.setState({ goToChat: true })\n  }\n\n  render () {\n    if (this.state.goToChat) {\n      return <Redirect push to={`/pseudo/${this.state.pseudo}`} />\n    }\n\n    return (\n      <div className='connexionBox'>\n        <p className='connexionTitle'>Salle de discussion</p>\n        <form className='connexion' onSubmit={this.handleSubmit}>\n          <input\n            value={this.state.pseudo}\n            onChange={this.handleChange}\n            placeholder='Pseudo'\n            type='text'\n            required />\n          <button type='submit'>Connexion</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Connexion\n","import React from 'react'\n\nconst NotFound = () => (\n  <h2 className='notFound'>Y'a rien ici!</h2>\n)\n\nexport default NotFound\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport Connexion from './components/Connexion'\nimport NotFound from './components/NotFound'\nimport * as serviceWorker from './serviceWorker'\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nconst Root = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path='/' component={Connexion} />\n      <Route path='/pseudo/:pseudo' component={App} />\n      <Route component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}